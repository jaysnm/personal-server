version: '3'
services:
# Proxy to forward https connections to services
  nginx:
    container_name: nginx
    image: nginx
    ports:
      - 80:80
      - 443:443
    volumes:
      - nginx:/etc/nginx/conf.d
      - ./secrets/nginx:/etc/nginx/certs:ro
    restart: always
  #Generate proxy settings for containers
  nginx-gen:
    container_name: nginx-gen
    image: jwilder/docker-gen
    depends_on:
      - nginx
    volumes:
      -  /var/run/docker.sock:/tmp/docker.sock:ro
      - ./volumes/proxy/templates/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl:ro
      - nginx:/etc/nginx/conf.d:/etc/nginx/conf.d
    entrypoint: /usr/local/bin/docker-gen -notify-sighup nginx -watch -wait 5s:30s /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    restart: always
# Rstudio server
  rstudio:
    container_name: rstudio
    image: rocker/tidyverse:latest
    ports:
      - 8888:8787
    volumes:
      - ./public_projects:/home/rstudio/public_projects
      - ./private_projects:/home/rstudio/private_projects
      - ./scripts:/home/rstudio/scripts
    env_file:
      - ./secrets/rstudio/creds.env
    environment:
      - VIRTUAL_HOST=rstudio.samabbott.co.uk
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=443
    restart: always
# Jenkins handles automated builds
  jenkins:
    container_name: jenkins
    build: containers/jenkins
    image: jenkins
    ports:
      - 9090:8080
      - 50000:50000
    volumes:
      - ./secrets/jenkins:/var/jenkins_home
      - ../personal-server:/var/personal-server
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - NETWORK_ACCESS=internal
    restart: always
# Launch shinyproxy for managing shiny apps
  shinyproxy:
    container_name: shinyproxy
    build: containers/shinyproxy
    image: shinyproxy
    ports:
      - 8080:8080
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - VIRTUAL_HOST=apps.samabbott.co.uk
      - VIRTUAL_PROTO=https
      - VIRTUAL_PORT=443
    restart: always
# Watchtower is a process for watching your Docker containers and automatically
# updating and restarting them whenever their base image is refreshed.
  watchtower:
    container_name: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - /root/.docker/config.json:/config.json
    environment:
      - NETWORK_ACCESS=internal
    # Look for new images every 5 minutes and removes old images
    # Removing --no-pull will allow watchtower to get images from repos (will not work for built images)
    command: --schedule "*/5 * * * * *" --cleanup --no-pull

volumes:
  nginx:
networks:
  default:
    external:
      name: server-net
